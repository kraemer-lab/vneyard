"""BEASTgen

A simple program for transforming data from one format to another [https://beast.community/beastgen]. For example, change a NEXUS file into a FASTA file.

This module calls "beastgen [arguments] <template> <input> <output>" where arguments is a string of command line arguments. This can include the option ‘-D’ which allows the user to specify additional variables and their values that are specific to a BEASTGen operation (see https://beast.community/beastgen for more information). The template file is a BEASTGen template file that specifies how the input file should be transformed. The input file is the file to be transformed. The output file is the file that will be created by the transformation. Note that emplate and input files must be concrete (not symbolic links) for BEASTGen to work.

Params:
    Template filename (str): BEASTGen template file [concrete]
    Input filename (str): Input file [concrete]
    Output filename (str): Output file
    Arguments: Command line arguments
        date_order (str): The order of the date field (negative numbers from last)
        date_prefix (str): A string that is the prefix to the date field
        date_regex (str): A string that gives the regular expression to match the date
        date_format (str): A string that gives the date format for parsing
        date_precision (str): Specifies the date is a variable precision yyyy-MM-dd format
        tree (str): Read a tree from a file
        traits (str): Assign traits to each taxon from a tsv file with headers.
        Exchange (list[str]): Properties for exchange in template file (the `-D` option). Provide a list of ("original=replacement") pairings.
        Extras (str): Additional arguments to pass to BEASTGen
"""
configfile: "config/config.yaml"
from grapevne_helper import import_grapevne

grapevne = import_grapevne(workflow)
globals().update(vars(grapevne))

arguments = param("Arguments")

# Form Excange ('-D') arguments string
args_exchange = []
for element in arguments["Exchange"]:
    args_exchange.append(element)  # assumes string is formatted as "original=replacement"
cli_exchange_list = ','.join(args_exchange)
cli_exchange = f'-D "{cli_exchange_list}"' if cli_exchange_list else ""

# Form command line arguments list
args = []
for k, v in arguments.items():
    if k == "Exchange" or k == "Extras" or v is None:
        continue
    if len(v) > 0:
        args.append(f"-{k} {v}")
cli_args = ' '.join(args)
cli = ' '.join([cli_args, cli_exchange, arguments['Extras']])

rule beastgen:
    input:
        infile = input(param("Input filename"), "file"),
        template = input(param("Template filename"), "template"),
        beastgen = remote("https://github.com/beast-dev/beast-mcmc/releases/download/v1.10.5pre_thorney_v0.1.2/BEASTGen_v0.3pre_thorney.tgz"),
    output:
        outfile = output(param("Output filename")),
    params:
        args = cli,
        workspace = "workspace",
    log:
        log("beastgen")
    conda:
        env("beastgen.yaml")
    shell:
        """
        # Download BEASTGen if not already present
        if [ ! -d {params.workspace}/beastgen ]; then
            mkdir -p {params.workspace}/beastgen
            mv {input.beastgen} {params.workspace}/beastgen.tgz
            tar -xzf {params.workspace}/beastgen.tgz -C {params.workspace}/beastgen --strip-components 1
            rm {params.workspace}/beastgen.tgz
        fi

        # Run BEASTGen
        {params.workspace}/beastgen/bin/beastgen {params.args} {input.template} {input.infile} {output.outfile}
        """
